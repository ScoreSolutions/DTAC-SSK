'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.7905
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.7905.
'
Namespace FaultManagementService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="FaultManagementServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class FaultManagementService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendFileToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadFileFromDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMonitorFileToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMonitorFileFromDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendConfigFileToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadConfigFileFromDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteConfigFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmByServerNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InserAlarmWaitingClearOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAlarmWaitingClearOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendClearAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddConfigPortOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigPortListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteConfigPortListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendImAliveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FaultManagement.My.MySettings.Default.FaultManagement_FaultManagementService_FaultManagementService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendFileToDCCompleted As SendFileToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadFileFromDCCompleted As LoadFileFromDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMonitorFileToDCCompleted As SendMonitorFileToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMonitorFileFromDCCompleted As LoadMonitorFileFromDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendConfigFileToDCCompleted As SendConfigFileToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadConfigFileFromDCCompleted As LoadConfigFileFromDCCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteConfigFileCompleted As DeleteConfigFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmURLCompleted As GetAlarmURLCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAlarmCompleted As SendAlarmCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmByServerNameCompleted As GetAlarmByServerNameCompletedEventHandler
        
        '''<remarks/>
        Public Event InserAlarmWaitingClearCompleted As InserAlarmWaitingClearCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAlarmWaitingClearCompleted As UpdateAlarmWaitingClearCompletedEventHandler
        
        '''<remarks/>
        Public Event SendClearAlarmCompleted As SendClearAlarmCompletedEventHandler
        
        '''<remarks/>
        Public Event AddConfigPortCompleted As AddConfigPortCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigPortListCompleted As GetConfigPortListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteConfigPortListCompleted As DeleteConfigPortListCompletedEventHandler
        
        '''<remarks/>
        Public Event SendImAliveCompleted As SendImAliveCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendFileToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFileToDC(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String) As Boolean
            Dim results() As Object = Me.Invoke("SendFileToDC", New Object() {FileByte, FileName, MachineName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String)
            Me.SendFileToDCAsync(FileByte, FileName, MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String, ByVal userState As Object)
            If (Me.SendFileToDCOperationCompleted Is Nothing) Then
                Me.SendFileToDCOperationCompleted = AddressOf Me.OnSendFileToDCOperationCompleted
            End If
            Me.InvokeAsync("SendFileToDC", New Object() {FileByte, FileName, MachineName}, Me.SendFileToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileToDCCompleted(Me, New SendFileToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFileFromDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadFileFromDC(ByVal FileName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("LoadFileFromDC", New Object() {FileName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadFileFromDCAsync(ByVal FileName As String)
            Me.LoadFileFromDCAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadFileFromDCAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.LoadFileFromDCOperationCompleted Is Nothing) Then
                Me.LoadFileFromDCOperationCompleted = AddressOf Me.OnLoadFileFromDCOperationCompleted
            End If
            Me.InvokeAsync("LoadFileFromDC", New Object() {FileName}, Me.LoadFileFromDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadFileFromDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadFileFromDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadFileFromDCCompleted(Me, New LoadFileFromDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMonitorFileToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMonitorFileToDC(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String) As Boolean
            Dim results() As Object = Me.Invoke("SendMonitorFileToDC", New Object() {FileByte, FileName, MachineName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMonitorFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String)
            Me.SendMonitorFileToDCAsync(FileByte, FileName, MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMonitorFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String, ByVal userState As Object)
            If (Me.SendMonitorFileToDCOperationCompleted Is Nothing) Then
                Me.SendMonitorFileToDCOperationCompleted = AddressOf Me.OnSendMonitorFileToDCOperationCompleted
            End If
            Me.InvokeAsync("SendMonitorFileToDC", New Object() {FileByte, FileName, MachineName}, Me.SendMonitorFileToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMonitorFileToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMonitorFileToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMonitorFileToDCCompleted(Me, New SendMonitorFileToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadMonitorFileFromDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMonitorFileFromDC(ByVal ServerName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("LoadMonitorFileFromDC", New Object() {ServerName})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMonitorFileFromDCAsync(ByVal ServerName As String)
            Me.LoadMonitorFileFromDCAsync(ServerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMonitorFileFromDCAsync(ByVal ServerName As String, ByVal userState As Object)
            If (Me.LoadMonitorFileFromDCOperationCompleted Is Nothing) Then
                Me.LoadMonitorFileFromDCOperationCompleted = AddressOf Me.OnLoadMonitorFileFromDCOperationCompleted
            End If
            Me.InvokeAsync("LoadMonitorFileFromDC", New Object() {ServerName}, Me.LoadMonitorFileFromDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMonitorFileFromDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMonitorFileFromDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMonitorFileFromDCCompleted(Me, New LoadMonitorFileFromDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendConfigFileToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendConfigFileToDC(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String) As Boolean
            Dim results() As Object = Me.Invoke("SendConfigFileToDC", New Object() {FileByte, FileName, MachineName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendConfigFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String)
            Me.SendConfigFileToDCAsync(FileByte, FileName, MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendConfigFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String, ByVal userState As Object)
            If (Me.SendConfigFileToDCOperationCompleted Is Nothing) Then
                Me.SendConfigFileToDCOperationCompleted = AddressOf Me.OnSendConfigFileToDCOperationCompleted
            End If
            Me.InvokeAsync("SendConfigFileToDC", New Object() {FileByte, FileName, MachineName}, Me.SendConfigFileToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendConfigFileToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendConfigFileToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendConfigFileToDCCompleted(Me, New SendConfigFileToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadConfigFileFromDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadConfigFileFromDC(ByVal ServerName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("LoadConfigFileFromDC", New Object() {ServerName})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadConfigFileFromDCAsync(ByVal ServerName As String)
            Me.LoadConfigFileFromDCAsync(ServerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadConfigFileFromDCAsync(ByVal ServerName As String, ByVal userState As Object)
            If (Me.LoadConfigFileFromDCOperationCompleted Is Nothing) Then
                Me.LoadConfigFileFromDCOperationCompleted = AddressOf Me.OnLoadConfigFileFromDCOperationCompleted
            End If
            Me.InvokeAsync("LoadConfigFileFromDC", New Object() {ServerName}, Me.LoadConfigFileFromDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadConfigFileFromDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadConfigFileFromDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadConfigFileFromDCCompleted(Me, New LoadConfigFileFromDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteConfigFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteConfigFile(ByVal XMLConfigFileName As String, ByVal RepQty As Integer) As Boolean
            Dim results() As Object = Me.Invoke("DeleteConfigFile", New Object() {XMLConfigFileName, RepQty})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigFileAsync(ByVal XMLConfigFileName As String, ByVal RepQty As Integer)
            Me.DeleteConfigFileAsync(XMLConfigFileName, RepQty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigFileAsync(ByVal XMLConfigFileName As String, ByVal RepQty As Integer, ByVal userState As Object)
            If (Me.DeleteConfigFileOperationCompleted Is Nothing) Then
                Me.DeleteConfigFileOperationCompleted = AddressOf Me.OnDeleteConfigFileOperationCompleted
            End If
            Me.InvokeAsync("DeleteConfigFile", New Object() {XMLConfigFileName, RepQty}, Me.DeleteConfigFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteConfigFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteConfigFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteConfigFileCompleted(Me, New DeleteConfigFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlarmURL() As String
            Dim results() As Object = Me.Invoke("GetAlarmURL", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmURLAsync()
            Me.GetAlarmURLAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmURLAsync(ByVal userState As Object)
            If (Me.GetAlarmURLOperationCompleted Is Nothing) Then
                Me.GetAlarmURLOperationCompleted = AddressOf Me.OnGetAlarmURLOperationCompleted
            End If
            Me.InvokeAsync("GetAlarmURL", New Object(-1) {}, Me.GetAlarmURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmURLCompleted(Me, New GetAlarmURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendAlarm(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String) As Boolean
            Dim results() As Object = Me.Invoke("SendAlarm", New Object() {SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAlarmAsync(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String)
            Me.SendAlarmAsync(SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAlarmAsync(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String, ByVal userState As Object)
            If (Me.SendAlarmOperationCompleted Is Nothing) Then
                Me.SendAlarmOperationCompleted = AddressOf Me.OnSendAlarmOperationCompleted
            End If
            Me.InvokeAsync("SendAlarm", New Object() {SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod}, Me.SendAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAlarmCompleted(Me, New SendAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmByServerName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlarmByServerName(ByVal ServerName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAlarmByServerName", New Object() {ServerName})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmByServerNameAsync(ByVal ServerName As String)
            Me.GetAlarmByServerNameAsync(ServerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmByServerNameAsync(ByVal ServerName As String, ByVal userState As Object)
            If (Me.GetAlarmByServerNameOperationCompleted Is Nothing) Then
                Me.GetAlarmByServerNameOperationCompleted = AddressOf Me.OnGetAlarmByServerNameOperationCompleted
            End If
            Me.InvokeAsync("GetAlarmByServerName", New Object() {ServerName}, Me.GetAlarmByServerNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmByServerNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmByServerNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmByServerNameCompleted(Me, New GetAlarmByServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserAlarmWaitingClear", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InserAlarmWaitingClear(ByVal sql As String) As Long
            Dim results() As Object = Me.Invoke("InserAlarmWaitingClear", New Object() {sql})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InserAlarmWaitingClearAsync(ByVal sql As String)
            Me.InserAlarmWaitingClearAsync(sql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InserAlarmWaitingClearAsync(ByVal sql As String, ByVal userState As Object)
            If (Me.InserAlarmWaitingClearOperationCompleted Is Nothing) Then
                Me.InserAlarmWaitingClearOperationCompleted = AddressOf Me.OnInserAlarmWaitingClearOperationCompleted
            End If
            Me.InvokeAsync("InserAlarmWaitingClear", New Object() {sql}, Me.InserAlarmWaitingClearOperationCompleted, userState)
        End Sub
        
        Private Sub OnInserAlarmWaitingClearOperationCompleted(ByVal arg As Object)
            If (Not (Me.InserAlarmWaitingClearCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InserAlarmWaitingClearCompleted(Me, New InserAlarmWaitingClearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlarmWaitingClear", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAlarmWaitingClear(ByVal DCAlarmWaitingClearID As Long) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAlarmWaitingClear", New Object() {DCAlarmWaitingClearID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmWaitingClearAsync(ByVal DCAlarmWaitingClearID As Long)
            Me.UpdateAlarmWaitingClearAsync(DCAlarmWaitingClearID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmWaitingClearAsync(ByVal DCAlarmWaitingClearID As Long, ByVal userState As Object)
            If (Me.UpdateAlarmWaitingClearOperationCompleted Is Nothing) Then
                Me.UpdateAlarmWaitingClearOperationCompleted = AddressOf Me.OnUpdateAlarmWaitingClearOperationCompleted
            End If
            Me.InvokeAsync("UpdateAlarmWaitingClear", New Object() {DCAlarmWaitingClearID}, Me.UpdateAlarmWaitingClearOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAlarmWaitingClearOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAlarmWaitingClearCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAlarmWaitingClearCompleted(Me, New UpdateAlarmWaitingClearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendClearAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendClearAlarm(ByVal DCAlarmWaitingClearID As Long) As Boolean
            Dim results() As Object = Me.Invoke("SendClearAlarm", New Object() {DCAlarmWaitingClearID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendClearAlarmAsync(ByVal DCAlarmWaitingClearID As Long)
            Me.SendClearAlarmAsync(DCAlarmWaitingClearID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendClearAlarmAsync(ByVal DCAlarmWaitingClearID As Long, ByVal userState As Object)
            If (Me.SendClearAlarmOperationCompleted Is Nothing) Then
                Me.SendClearAlarmOperationCompleted = AddressOf Me.OnSendClearAlarmOperationCompleted
            End If
            Me.InvokeAsync("SendClearAlarm", New Object() {DCAlarmWaitingClearID}, Me.SendClearAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendClearAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendClearAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendClearAlarmCompleted(Me, New SendClearAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddConfigPort", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddConfigPort(ByVal ServerName As String, ByVal IPAddress As String, ByVal PortNumber As Integer, ByVal ChkSun As String, ByVal ChkMon As String, ByVal ChkTue As String, ByVal ChkWed As String, ByVal ChkThu As String, ByVal ChkFri As String, ByVal ChkSat As String, ByVal ChkAllDay As String, ByVal AlarmTimeFrom As String, ByVal AlarmTimeTo As String) As Boolean
            Dim results() As Object = Me.Invoke("AddConfigPort", New Object() {ServerName, IPAddress, PortNumber, ChkSun, ChkMon, ChkTue, ChkWed, ChkThu, ChkFri, ChkSat, ChkAllDay, AlarmTimeFrom, AlarmTimeTo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddConfigPortAsync(ByVal ServerName As String, ByVal IPAddress As String, ByVal PortNumber As Integer, ByVal ChkSun As String, ByVal ChkMon As String, ByVal ChkTue As String, ByVal ChkWed As String, ByVal ChkThu As String, ByVal ChkFri As String, ByVal ChkSat As String, ByVal ChkAllDay As String, ByVal AlarmTimeFrom As String, ByVal AlarmTimeTo As String)
            Me.AddConfigPortAsync(ServerName, IPAddress, PortNumber, ChkSun, ChkMon, ChkTue, ChkWed, ChkThu, ChkFri, ChkSat, ChkAllDay, AlarmTimeFrom, AlarmTimeTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddConfigPortAsync(ByVal ServerName As String, ByVal IPAddress As String, ByVal PortNumber As Integer, ByVal ChkSun As String, ByVal ChkMon As String, ByVal ChkTue As String, ByVal ChkWed As String, ByVal ChkThu As String, ByVal ChkFri As String, ByVal ChkSat As String, ByVal ChkAllDay As String, ByVal AlarmTimeFrom As String, ByVal AlarmTimeTo As String, ByVal userState As Object)
            If (Me.AddConfigPortOperationCompleted Is Nothing) Then
                Me.AddConfigPortOperationCompleted = AddressOf Me.OnAddConfigPortOperationCompleted
            End If
            Me.InvokeAsync("AddConfigPort", New Object() {ServerName, IPAddress, PortNumber, ChkSun, ChkMon, ChkTue, ChkWed, ChkThu, ChkFri, ChkSat, ChkAllDay, AlarmTimeFrom, AlarmTimeTo}, Me.AddConfigPortOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddConfigPortOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddConfigPortCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddConfigPortCompleted(Me, New AddConfigPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigPortList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigPortList(ByVal whText As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetConfigPortList", New Object() {whText})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigPortListAsync(ByVal whText As String)
            Me.GetConfigPortListAsync(whText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigPortListAsync(ByVal whText As String, ByVal userState As Object)
            If (Me.GetConfigPortListOperationCompleted Is Nothing) Then
                Me.GetConfigPortListOperationCompleted = AddressOf Me.OnGetConfigPortListOperationCompleted
            End If
            Me.InvokeAsync("GetConfigPortList", New Object() {whText}, Me.GetConfigPortListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigPortListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigPortListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigPortListCompleted(Me, New GetConfigPortListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteConfigPortList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteConfigPortList(ByVal id As Long) As Boolean
            Dim results() As Object = Me.Invoke("DeleteConfigPortList", New Object() {id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigPortListAsync(ByVal id As Long)
            Me.DeleteConfigPortListAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigPortListAsync(ByVal id As Long, ByVal userState As Object)
            If (Me.DeleteConfigPortListOperationCompleted Is Nothing) Then
                Me.DeleteConfigPortListOperationCompleted = AddressOf Me.OnDeleteConfigPortListOperationCompleted
            End If
            Me.InvokeAsync("DeleteConfigPortList", New Object() {id}, Me.DeleteConfigPortListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteConfigPortListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteConfigPortListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteConfigPortListCompleted(Me, New DeleteConfigPortListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendImAlive", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendImAlive(ByVal ServerName As String, ByVal ServerIP As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date) As Boolean
            Dim results() As Object = Me.Invoke("SendImAlive", New Object() {ServerName, ServerIP, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendImAliveAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date)
            Me.SendImAliveAsync(ServerName, ServerIP, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendImAliveAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date, ByVal userState As Object)
            If (Me.SendImAliveOperationCompleted Is Nothing) Then
                Me.SendImAliveOperationCompleted = AddressOf Me.OnSendImAliveOperationCompleted
            End If
            Me.InvokeAsync("SendImAlive", New Object() {ServerName, ServerIP, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime}, Me.SendImAliveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendImAliveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendImAliveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendImAliveCompleted(Me, New SendImAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendFileToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendFileToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub LoadFileFromDCCompletedEventHandler(ByVal sender As Object, ByVal e As LoadFileFromDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadFileFromDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendMonitorFileToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendMonitorFileToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMonitorFileToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub LoadMonitorFileFromDCCompletedEventHandler(ByVal sender As Object, ByVal e As LoadMonitorFileFromDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadMonitorFileFromDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendConfigFileToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendConfigFileToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendConfigFileToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub LoadConfigFileFromDCCompletedEventHandler(ByVal sender As Object, ByVal e As LoadConfigFileFromDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadConfigFileFromDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub DeleteConfigFileCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteConfigFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteConfigFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub GetAlarmURLCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As SendAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub GetAlarmByServerNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmByServerNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmByServerNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub InserAlarmWaitingClearCompletedEventHandler(ByVal sender As Object, ByVal e As InserAlarmWaitingClearCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InserAlarmWaitingClearCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub UpdateAlarmWaitingClearCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAlarmWaitingClearCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAlarmWaitingClearCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendClearAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As SendClearAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendClearAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub AddConfigPortCompletedEventHandler(ByVal sender As Object, ByVal e As AddConfigPortCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddConfigPortCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub GetConfigPortListCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigPortListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigPortListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub DeleteConfigPortListCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteConfigPortListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteConfigPortListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub SendImAliveCompletedEventHandler(ByVal sender As Object, ByVal e As SendImAliveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendImAliveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
